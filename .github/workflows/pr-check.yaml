#
# Copyright (C) 2025 Red Hat, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

name: pr-check

on:
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  build:
    name: build
    runs-on: macos-26
    timeout-minutes: 40
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
      - uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd # v1.6.0
        with:
          xcode-version: latest-stable

      - name: Display swift version
        run: |
          which swift
          swift --version

      - name: Display Xcode version
        run: |
          xcodebuild -version
          xcode-select -p
          xcrun --sdk macosx --show-sdk-path

      - name: Run Build
        timeout-minutes: 40
        run: make release

      - name: List Build
        run: ls -la ./.build/arm64-apple-macosx/release/

      - name: build installer package
        run: |
          make installer

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: socktainer
          path: ./.build/arm64-apple-macosx/release/socktainer

      - uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: socktainer-installer
          path: ./pkginstaller/out/socktainer-installer.pkg

  tests-lint-format:
    name: formatters & tests
    runs-on: macos-26
    timeout-minutes: 40
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - uses: actions/cache@v4
        with:
          path: .build
          key: ${{ runner.os }}-spm-${{ hashFiles('**/Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - uses: maxim-lobanov/setup-xcode@60606e260d2fc5762a71e64e74b2174e8ea3c8bd # v1.6.0
        with:
          xcode-version: latest-stable

      - name: Display swift version
        run: |
          which swift
          swift --version

      - name: Display Xcode version
        run: |
          xcodebuild -version
          xcode-select -p
          xcrun --sdk macosx --show-sdk-path

      - name: Run formatter
        run: make fmt

      # Check we don't have changes in git
      - name: Check no changes in git
        run: |
          if ! git diff --exit-code; then
            echo "Found changes in git"
            exit 1
          fi

      - name: Execute test
        run: make test

  integration-test:
    name: integration test
    needs: build
    runs-on: macos-26
    timeout-minutes: 40
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      # fetch the artifact from the build job
      - uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: socktainer

      - name: List downloaded artifact
        run: |
          ls -la
          chmod 755 socktainer

      - name: fetch apple container
        run: |
          APPLE_CONTAINER_VERSION=$(grep 'package(url: "https://github.com/apple/container.git"' Package.swift | sed -E 's/.*from: "([0-9.]+)".*/\1/')
          wget https://github.com/apple/container/releases/download/${APPLE_CONTAINER_VERSION}/container-${APPLE_CONTAINER_VERSION}-installer-signed.pkg -O container-installer-signed.pkg

      - name: install apple container
        run: sudo installer -pkg container-installer-signed.pkg -target / -verbose

      - name: setup tmate
        run: |
          brew install tmate

      - name: Start internal tmate session and start container system using this tmate session
        run: |
          # Start a detached tmate session
          tmate -S /tmp/tmate.sock new-session -d
          tmate -S /tmp/tmate.sock wait tmate-ready
          # skip welcome screen
          tmate -F -S /tmp/tmate.sock send-keys "q" C-m

          # Send Apple Container commands automatically
          tmate -S /tmp/tmate.sock send-keys "echo 'Starting Apple Container...'" C-m
          tmate -S /tmp/tmate.sock send-keys "sudo container system start --enable-kernel-install | tee /tmp/container.log" C-m

          # Loop until 'container system status' returns exit code 1 or timeout (60s)
          START=$SECONDS
          TIMEOUT=60

          while [ $((SECONDS - START)) -lt $TIMEOUT ]; do
            # Capture tmate session output
            tmate -S /tmp/tmate.sock capture-pane -p > /tmp/container.log
            cat /tmp/container.log

            # Check container status locally
            if sudo container system status >/dev/null 2>&1; then
              # Exit code 0 â†’ container is ready
              echo "Container is ready. Exiting loop."
              break
            else
              echo "Container not ready yet..."
            fi
          done

          # stop tmate session
          tmate -S /tmp/tmate.sock kill-session

      - name: run socktainer
        run: |
          nohup sudo -i $PWD/socktainer > service.log 2>&1 &
          echo $! > service.pid
          sudo ln -s /var/root/.socktainer/container.sock /var/run/docker.sock
          sleep 5
          cat service.log

      - name: check container root
        run: |
          sudo container image pull hello-world
          sudo container image ls

      - name: install docker cli
        run: |
          brew install docker

      - name: check docker image with socktainer
        run: |
          # expect that hello-world is present
          sudo docker image ls | grep hello-world
          # pull httpd image
          sudo docker image pull httpd:latest
          # list images
          sudo docker image ls | grep httpd
          # check inspect
          # Get the image ID
          IMAGE_ID=$(sudo docker image inspect httpd | jq -r '.[0].Id')
          echo "Image ID: $IMAGE_ID"
          # Check and fail if it doesn't start with sha256:
          [[ $IMAGE_ID == sha256:* ]] || { echo "Error: Image ID does not start with sha256:"; exit 1; }
          # pull image using digest
          sudo docker pull quay.io/podman/hello@sha256:41316c18917a27a359ee3191fd8f43559d30592f82a144bbc59d9d44790f6e7a
          # NOTE: we are not inspecting the image with digest due to
          # https://github.com/socktainer/socktainer/issues/47
          # check image is present
          sudo docker image ls | grep 'quay.io/podman/hello'
          # Tag images
          sudo docker image tag httpd test
          sudo docker image inspect test

      # NOTE: Disabling tests for now.
      #       Most likely calling some internal function that fails
      #       on CI host.
      # - name: check system info was returned by socktainer
      #   run: |
      #     # expect specific content returned via `/info` endpoint
      #     sudo docker info | grep 'container-apiserver'
      #     sudo docker info | grep 'com.apple.container'
      #     sudo docker info | grep 'socktainer'

      - name: check version info was returned by socktainer
        run: |
          # expect specific content returned via `/version` endpoint
          sudo docker version | grep 'socktainer'
          # expect specific Docker engine API versions
          sudo docker version | grep 'v1.32'
          sudo docker version | grep 'v1.51'

      - name: check network with socktainer
        run: |
          # expect default network to be present
          sudo docker network ls | grep default
          # inspect the default network
          NETWORK_ID=$(sudo docker network inspect default | jq -r '.[].Id')
          echo "Network ID: ${NETWORK_ID}"
          # Check and fail if it doesn't match 'default':
          [[ ${NETWORK_ID} == default ]] || { echo "Error: Network ID does not match 'default'"; exit 1; }
          # create networks
          sudo docker network create test1
          sudo docker network create test2
          sudo docker network create test3
          sudo docker network create test4
          sudo docker network create foo
          # delete network
          sudo docker network rm foo
          # prune networks using filter
          sudo docker network prune --filter 'name=test' --force
          # ensure only default is left
          sudo docker network ls | grep 'default'
          # Create a network with a label
          sudo docker network create bar --label 'test=true'
          # expect to get the label back when inspecting the network
          [[ $(sudo docker network inspect bar | jq -r ".[0].Labels.test // empty") == "true" ]] || { echo "Error: Label 'test=true' not found"; exit 1;}

      # NOTE: Inspecting a volume is not possible in CI
      - name: check volume with socktainer
        run: |
          # create volume with randomly generated name
          sudo docker volume create
          # create volume
          sudo docker volume create test
          # create volumes with labels
          sudo docker volume create foo --label 'test=false'
          sudo docker volume create bar --label 'test=true'
          # filter volumes by `test` expect 2 volumes to return (extra line for header)
          [[ "3" == $(sudo docker volume ls --filter 'label=test' | wc -l | xargs) ]]
          # filter volumes by `test=true` expect a single volume to return (extra line for header)
          [[ "2" == $(sudo docker volume ls --filter 'label=test=true' | wc -l | xargs) ]]
          # inspect volume
          # sudo docker inspect test
          # delete single volume
          sudo docker volume rm test
          # prune containers by labels and ensure it is not present
          sudo docker volume prune --force --filter 'label=test=true'
          [[ "2" == $(sudo docker volume ls --filter 'label=test' | wc -l | xargs) ]]
          # prune all images end ensure no volumes are left
          sudo docker volume prune --all --force
          [[ "1" == $(sudo docker volume ls | wc -l | xargs) ]]
